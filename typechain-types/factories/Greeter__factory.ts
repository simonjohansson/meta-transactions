/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Greeter, GreeterInterface } from "../Greeter";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "greet",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    name: "setGreeting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000fa538038062000fa58339818101604052810190620000379190620004d6565b6200006760405180606001604052806022815260200162000f8360229139826200011460201b6200021d1760201c565b620000b36040518060400160405280600981526020017f4f776e65722069733a000000000000000000000000000000000000000000000081525033620001ba60201b620002b91760201c565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600090805190602001906200010c92919062000289565b50506200069d565b620001b682826040516024016200012d92919062000584565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200026060201b60201c565b5050565b6200025c8282604051602401620001d392919062000604565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200026060201b60201c565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054620002979062000667565b90600052602060002090601f016020900481019282620002bb576000855562000307565b82601f10620002d657805160ff191683800117855562000307565b8280016001018555821562000307579182015b8281111562000306578251825591602001919060010190620002e9565b5b5090506200031691906200031a565b5090565b5b80821115620003355760008160009055506001016200031b565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003a28262000357565b810181811067ffffffffffffffff82111715620003c457620003c362000368565b5b80604052505050565b6000620003d962000339565b9050620003e7828262000397565b919050565b600067ffffffffffffffff8211156200040a576200040962000368565b5b620004158262000357565b9050602081019050919050565b60005b838110156200044257808201518184015260208101905062000425565b8381111562000452576000848401525b50505050565b60006200046f6200046984620003ec565b620003cd565b9050828152602081018484840111156200048e576200048d62000352565b5b6200049b84828562000422565b509392505050565b600082601f830112620004bb57620004ba6200034d565b5b8151620004cd84826020860162000458565b91505092915050565b600060208284031215620004ef57620004ee62000343565b5b600082015167ffffffffffffffff81111562000510576200050f62000348565b5b6200051e84828501620004a3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000620005508262000527565b6200055c818562000532565b93506200056e81856020860162000422565b620005798162000357565b840191505092915050565b60006040820190508181036000830152620005a0818562000543565b90508181036020830152620005b6818462000543565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005ec82620005bf565b9050919050565b620005fe81620005df565b82525050565b6000604082019050818103600083015262000620818562000543565b9050620006316020830184620005f3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200068057607f821691505b6020821081141562000697576200069662000638565b5b50919050565b6108d680620006ad6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638da5cb5b14610046578063a413686214610064578063cfae321714610080575b600080fd5b61004e61009e565b60405161005b9190610501565b60405180910390f35b61007e60048036038101906100799190610676565b6100c4565b005b61008861018b565b6040516100959190610747565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61017160405180606001604052806023815260200161087e60239139600080546100ed90610798565b80601f016020809104026020016040519081016040528092919081815260200182805461011990610798565b80156101665780601f1061013b57610100808354040283529160200191610166565b820191906000526020600020905b81548152906001019060200180831161014957829003601f168201915b505050505083610355565b806000908051906020019061018792919061041d565b5050565b60606000805461019a90610798565b80601f01602080910402602001604051908101604052809291908181526020018280546101c690610798565b80156102135780601f106101e857610100808354040283529160200191610213565b820191906000526020600020905b8154815290600101906020018083116101f657829003601f168201915b5050505050905090565b6102b582826040516024016102339291906107ca565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506103f4565b5050565b61035182826040516024016102cf929190610801565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506103f4565b5050565b6103ef83838360405160240161036d93929190610831565b6040516020818303038152906040527f2ced7cef000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506103f4565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b82805461042990610798565b90600052602060002090601f01602090048101928261044b5760008555610492565b82601f1061046457805160ff1916838001178555610492565b82800160010185558215610492579182015b82811115610491578251825591602001919060010190610476565b5b50905061049f91906104a3565b5090565b5b808211156104bc5760008160009055506001016104a4565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104eb826104c0565b9050919050565b6104fb816104e0565b82525050565b600060208201905061051660008301846104f2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105838261053a565b810181811067ffffffffffffffff821117156105a2576105a161054b565b5b80604052505050565b60006105b561051c565b90506105c1828261057a565b919050565b600067ffffffffffffffff8211156105e1576105e061054b565b5b6105ea8261053a565b9050602081019050919050565b82818337600083830152505050565b6000610619610614846105c6565b6105ab565b90508281526020810184848401111561063557610634610535565b5b6106408482856105f7565b509392505050565b600082601f83011261065d5761065c610530565b5b813561066d848260208601610606565b91505092915050565b60006020828403121561068c5761068b610526565b5b600082013567ffffffffffffffff8111156106aa576106a961052b565b5b6106b684828501610648565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106f95780820151818401526020810190506106de565b83811115610708576000848401525b50505050565b6000610719826106bf565b61072381856106ca565b93506107338185602086016106db565b61073c8161053a565b840191505092915050565b60006020820190508181036000830152610761818461070e565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107b057607f821691505b602082108114156107c4576107c3610769565b5b50919050565b600060408201905081810360008301526107e4818561070e565b905081810360208301526107f8818461070e565b90509392505050565b6000604082019050818103600083015261081b818561070e565b905061082a60208301846104f2565b9392505050565b6000606082019050818103600083015261084b818661070e565b9050818103602083015261085f818561070e565b90508181036040830152610873818461070e565b905094935050505056fe4368616e67696e67206772656574696e672066726f6d202725732720746f2027257327a264697066735822122045fe0f43328db129f7bbf79621d5ac9cc84d3fa11b7d709abde468788a88900d64736f6c634300080b00334465706c6f79696e67206120477265657465722077697468206772656574696e673a";

type GreeterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GreeterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Greeter__factory extends ContractFactory {
  constructor(...args: GreeterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Greeter";
  }

  deploy(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Greeter> {
    return super.deploy(_greeting, overrides || {}) as Promise<Greeter>;
  }
  getDeployTransaction(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_greeting, overrides || {});
  }
  attach(address: string): Greeter {
    return super.attach(address) as Greeter;
  }
  connect(signer: Signer): Greeter__factory {
    return super.connect(signer) as Greeter__factory;
  }
  static readonly contractName: "Greeter";
  public readonly contractName: "Greeter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreeterInterface {
    return new utils.Interface(_abi) as GreeterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Greeter {
    return new Contract(address, _abi, signerOrProvider) as Greeter;
  }
}
